!function (a) {
    "object" === typeof module && module.exports ? (a["default"] = a, module.exports = a) : "function" === typeof define && define.amd ? define("highcharts/modules/exporting", ["highcharts"], function (b) {
        a(b);
        a.Highcharts = b;
        return a;
    }) : a("undefined" !== typeof Highcharts ? Highcharts : void 0);
}(function (a) {
    function b(a, b, c, d) {
        a.hasOwnProperty(b) || (a[b] = d.apply(null, c), "function" === typeof CustomEvent && window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded", {
            detail: {
                path: b,
                module: a[b]
            }
        })));
    }
    a = a ? a._modules : {};
    b(a, "Extensions/FullScreen.js", [a["Core/Chart/Chart.js"], a["Core/Globals.js"], a["Core/Renderer/HTML/AST.js"], a["Core/Utilities.js"]], function (a, b, c, d) {
        var e = d.addEvent;
        d = function () {
            function a(a) {
                this.chart = a;
                this.isOpen = !1;
                a = a.renderTo;
                this.browserProps || ("function" === typeof a.requestFullscreen ? this.browserProps = {
                    fullscreenChange: "fullscreenchange",
                    requestFullscreen: "requestFullscreen",
                    exitFullscreen: "exitFullscreen"
                } : a.mozRequestFullScreen ? this.browserProps = {
                    fullscreenChange: "mozfullscreenchange",
                    requestFullscreen: "mozRequestFullScreen",
                    exitFullscreen: "mozCancelFullScreen"
                } : a.webkitRequestFullScreen ? this.browserProps = {
                    fullscreenChange: "webkitfullscreenchange",
                    requestFullscreen: "webkitRequestFullScreen",
                    exitFullscreen: "webkitExitFullscreen"
                } : a.msRequestFullscreen && (this.browserProps = {
                    fullscreenChange: "MSFullscreenChange",
                    requestFullscreen: "msRequestFullscreen",
                    exitFullscreen: "msExitFullscreen"
                }));
            }
            a.prototype.close = function () {
                var a = this.chart, b = a.options.chart;
                if (this.isOpen && this.browserProps && a.container.ownerDocument instanceof Document) a.container.ownerDocument[this.browserProps.exitFullscreen]();
                this.unbindFullscreenEvent && (this.unbindFullscreenEvent = this.unbindFullscreenEvent());
                a.setSize(this.origWidth, this.origHeight, !1);
                this.origHeight = this.origWidth = void 0;
                b.width = this.origWidthOption;
                b.height = this.origHeightOption;
                this.origHeightOption = this.origWidthOption = void 0;
                this.isOpen = !1;
                this.setButtonText();
            };
            a.prototype.open = function () {
                var a = this, b = a.chart, c = b.options.chart;
                c && (a.origWidthOption = c.width, a.origHeightOption = c.height);
                a.origWidth = b.chartWidth;
                a.origHeight = b.chartHeight;
                if (a.browserProps) {
                    var d = e(b.container.ownerDocument, a.browserProps.fullscreenChange, function () {
                        a.isOpen ? (a.isOpen = !1, a.close()) : (b.setSize(null, null, !1), a.isOpen = !0,
                            a.setButtonText());
                    }), f = e(b, "destroy", d);
                    a.unbindFullscreenEvent = function () {
                        d();
                        f();
                    };
                    if (c = b.renderTo[a.browserProps.requestFullscreen]()) c["catch"](function () {
                        alert("Full screen is not supported inside a frame.");
                    });
                }
            };
            a.prototype.setButtonText = function () {
                var a = this.chart, b = a.exportDivElements, d = a.options.exporting, e = d && d.buttons && d.buttons.contextButton.menuItems;
                a = a.options.lang;
                d && d.menuItemDefinitions && a && a.exitFullscreen && a.viewFullscreen && e && b && (b = b[e.indexOf("viewFullscreen")]) && c.setElementHTML(b, this.isOpen ? a.exitFullscreen : d.menuItemDefinitions.viewFullscreen.text || a.viewFullscreen);
            };
            a.prototype.toggle = function () {
                this.isOpen ? this.close() : this.open();
            };
            return a;
        }();
        b.Fullscreen = d;
        e(a, "beforeRender", function () {
            this.fullscreen = new b.Fullscreen(this);
        });
        return b.Fullscreen;
    });
    b(a, "Core/Chart/ChartNavigationComposition.js", [], function () {
        var a;
        !function (a) {
            a.compose = function (a) {
                a.navigation || (a.navigation = new b(a));
                return a;
            };
            var b = function () {
                function a(a) {
                    this.updates = [];
                    this.chart = a;
                }
                a.prototype.addUpdate = function (a) {
                    this.chart.navigation.updates.push(a);
                };
                a.prototype.update = function (a, b) {
                    var c = this;
                    this.updates.forEach(function (d) {
                        d.call(c.chart, a, b);
                    });
                };
                return a;
            }();
            a.Additions = b;
        }(a || (a = {}));
        return a;
    });
    b(a, "Extensions/Exporting/ExportingDefaults.js", [a["Core/Globals.js"]], function (a) {
        return {
            exporting: {
                type: "image/png",
                url: "https://export.highcharts.com/",
                pdfFont: {
                    normal: void 0,
                    bold: void 0,
                    bolditalic: void 0,
                    italic: void 0
                },
                printMaxWidth: 780,
                scale: 2,
                buttons: {
                    contextButton: {
                        className: "highcharts-contextbutton",
                        menuClassName: "highcharts-contextmenu",
                        symbol: "menu",
                        titleKey: "contextButtonTitle",
                        menuItems: "viewFullscreen printChart separator downloadPNG downloadJPEG downloadPDF downloadSVG".split(" ")
                    }
                },
                menuItemDefinitions: {
                    viewFullscreen: {
                        textKey: "viewFullscreen",
                        onclick: function () {
                            this.fullscreen.toggle();
                        }
                    },
                    printChart: {
                        textKey: "printChart",
                        onclick: function () {
                            this.print();
                        }
                    },
                    separator: {
                        separator: !0
                    },
                    downloadPNG: {
                        textKey: "downloadPNG",
                        onclick: function () {
                            this.exportChart();
                        }
                    },
                    downloadJPEG: {
                        textKey: "downloadJPEG",
                        onclick: function () {
                            this.exportChart({
                                type: "image/jpeg"
                            });
                        }
                    },
                    downloadPDF: {
                        textKey: "downloadPDF",
                        onclick: function () {
                            this.exportChart({
                                type: "application/pdf"
                            });
                        }
                    },
                    downloadSVG: {
                        textKey: "downloadSVG",
                        onclick: function () {
                            this.exportChart({
                                type: "image/svg+xml"
                            });
                        }
                    }
                }
            },
            lang: {
                viewFullscreen: "View in full screen",
                exitFullscreen: "Exit from full screen",
                printChart: "Print chart",
                downloadPNG: "Download PNG image",
                downloadJPEG: "Download JPEG image",
                downloadPDF: "Download PDF document",
                downloadSVG: "Download SVG vector image",
                contextButtonTitle: "Chart context menu"
            },
            navigation: {
                buttonOptions: {
                    symbolSize: 14,
                    symbolX: 12.5,
                    symbolY: 10.5,
                    align: "right",
                    buttonSpacing: 3,
                    height: 22,
                    verticalAlign: "top",
                    width: 24,
                    symbolFill: "#666666",
                    symbolStroke: "#666666",
                    symbolStrokeWidth: 3,
                    theme: {
                        padding: 5
                    }
                },
                menuStyle: {
                    border: "1px solid #999999",
                    background: "#ffffff",
                    padding: "5px 0"
                },
                menuItemStyle: {
                    padding: "0.5em 1em",
                    color: "#333333",
                    background: "none",
                    fontSize: a.isTouchDevice ? "14px" : "11px",
                    transition: "background 250ms, color 250ms"
                },
                menuItemHoverStyle: {
                    background: "#335cad",
                    color: "#ffffff"
                }
            }
        };
    });
    b(a, "Extensions/Exporting/ExportingSymbols.js", [], function () {
        var a;
        !function (a) {
            function b(a, b, c, d) {
                return [["M", a, b + 2.5], ["L", a + c, b + 2.5], ["M", a, b + d / 2 + .5], ["L", a + c, b + d / 2 + .5], ["M", a, b + d - 1.5], ["L", a + c, b + d - 1.5]];
            }
            function c(a, b, c, d) {
                a = d / 3 - 2;
                d = [];
                return d = d.concat(this.circle(c - a, b, a, a), this.circle(c - a, b + a + 4, a, a), this.circle(c - a, b + 2 * (a + 4), a, a));
            }
            var d = [];
            a.compose = function (a) {
                -1 === d.indexOf(a) && (d.push(a), a = a.prototype.symbols, a.menu = b, a.menuball = c.bind(a));
            };
        }(a || (a = {}));
        return a;
    });
    b(a, "Core/HttpUtilities.js", [a["Core/Globals.js"], a["Core/Utilities.js"]], function (a, b) {
        var c = a.doc, d = b.createElement, e = b.discardElement, f = b.merge, g = b.objectEach, h = {
            ajax: function (a) {
                var b = f(!0, {
                    url: !1,
                    type: "get",
                    dataType: "json",
                    success: !1,
                    error: !1,
                    data: !1,
                    headers: {}
                }, a);
                a = {
                    json: "application/json",
                    xml: "application/xml",
                    text: "text/plain",
                    octet: "application/octet-stream"
                };
                var c = new XMLHttpRequest();
                if (!b.url) return !1;
                c.open(b.type.toUpperCase(), b.url, !0);
                b.headers["Content-Type"] || c.setRequestHeader("Content-Type", a[b.dataType] || a.text);
                g(b.headers, function (a, b) {
                    c.setRequestHeader(b, a);
                });
                b.responseType && (c.responseType = b.responseType);
                c.onreadystatechange = function () {
                    if (4 === c.readyState) {
                        if (200 === c.status) {
                            if ("blob" !== b.responseType) {
                                var a = c.responseText;
                                if ("json" === b.dataType) try {
                                    a = JSON.parse(a);
                                } catch (d) {
                                    b.error && b.error(c, d);
                                    return;
                                }
                            }
                            return b.success && b.success(a, c);
                        }
                        b.error && b.error(c, c.responseText);
                    }
                };
                try {
                    b.data = JSON.stringify(b.data);
                } catch (d) { }
                c.send(b.data || !0);
            },
            getJSON: function (a, b) {
                h.ajax({
                    url: a,
                    success: b,
                    dataType: "json",
                    headers: {
                        "Content-Type": "text/plain"
                    }
                });
            },
            post: function (a, b, h) {
                var i = d("form", f({
                    method: "post",
                    action: a,
                    enctype: "multipart/form-data"
                }, h), {
                    display: "none"
                }, c.body);
                g(b, function (a, b) {
                    d("input", {
                        type: "hidden",
                        name: b,
                        value: a
                    }, null, i);
                });
                i.submit();
                e(i);
            }
        };
        return h;
    });
    b(a, "Extensions/Exporting/Exporting.js", [a["Core/Renderer/HTML/AST.js"], a["Core/Chart/Chart.js"], a["Core/Chart/ChartNavigationComposition.js"], a["Core/DefaultOptions.js"], a["Extensions/Exporting/ExportingDefaults.js"], a["Extensions/Exporting/ExportingSymbols.js"], a["Core/Globals.js"], a["Core/HttpUtilities.js"], a["Core/Utilities.js"]], function (a, b, c, d, e, f, g, h, i) {
        b = d.defaultOptions;
        var j = g.doc, k = g.win, l = i.addEvent, m = i.css, n = i.createElement, o = i.discardElement, p = i.extend, q = i.find, r = i.fireEvent, s = i.isObject, t = i.merge, u = i.objectEach, v = i.pick, w = i.removeEvent, x = i.uniqueKey, y;
        !function (b) {
            function d(a) {
                var b = this, c = b.renderer, d = t(b.options.navigation.buttonOptions, a), e = d.onclick, f = d.menuItems, g = d.symbolSize || 12;
                b.btnCount || (b.btnCount = 0);
                b.exportDivElements || (b.exportDivElements = [], b.exportSVGElements = []);
                if (!1 !== d.enabled && d.theme) {
                    var h = d.theme, i = h.states, j = i && i.hover;
                    i = i && i.select;
                    var k;
                    b.styledMode || (h.fill = v(h.fill, "#ffffff"), h.stroke = v(h.stroke, "none"));
                    delete h.states;
                    e ? k = function (a) {
                        a && a.stopPropagation();
                        e.call(b, a);
                    } : f && (k = function (a) {
                        a && a.stopPropagation();
                        b.contextMenu(l.menuClassName, f, l.translateX, l.translateY, l.width, l.height, l);
                        l.setState(2);
                    });
                    d.text && d.symbol ? h.paddingLeft = v(h.paddingLeft, 30) : d.text || p(h, {
                        width: d.width,
                        height: d.height,
                        padding: 0
                    });
                    b.styledMode || (h["stroke-linecap"] = "round", h.fill = v(h.fill, "#ffffff"), h.stroke = v(h.stroke, "none"));
                    var l = c.button(d.text, 0, 0, k, h, j, i).addClass(a.className).attr({
                        title: v(b.options.lang[d._titleKey || d.titleKey], "")
                    });
                    l.menuClassName = a.menuClassName || "highcharts-menu-" + b.btnCount++;
                    if (d.symbol) {
                        var m = c.symbol(d.symbol, d.symbolX - g / 2, d.symbolY - g / 2, g, g, {
                            width: g,
                            height: g
                        }).addClass("highcharts-button-symbol").attr({
                            zIndex: 1
                        }).add(l);
                        b.styledMode || m.attr({
                            stroke: d.symbolStroke,
                            fill: d.symbolFill,
                            "stroke-width": d.symbolStrokeWidth || 1
                        });
                    }
                    l.add(b.exportingGroup).align(p(d, {
                        width: l.width,
                        x: v(d.x, b.buttonOffset)
                    }), !0, "spacingBox");
                    b.buttonOffset += (l.width + d.buttonSpacing) * ("right" === d.align ? -1 : 1);
                    b.exportSVGElements.push(l, m);
                }
            }
            function e() {
                if (this.printReverseInfo) {
                    var a = this.printReverseInfo, b = a.childNodes, c = a.origDisplay;
                    a = a.resetParams;
                    this.moveContainers(this.renderTo);
                    [].forEach.call(b, function (a, b) {
                        1 === a.nodeType && (a.style.display = c[b] || "");
                    });
                    this.isPrinting = !1;
                    a && this.setSize.apply(this, a);
                    delete this.printReverseInfo;
                    S = void 0;
                    r(this, "afterPrint");
                }
            }
            function y() {
                var a = j.body, b = this.options.exporting.printMaxWidth, c = {
                    childNodes: a.childNodes,
                    origDisplay: [],
                    resetParams: void 0
                };
                this.isPrinting = !0;
                this.pointer.reset(null, 0);
                r(this, "beforePrint");
                b && this.chartWidth > b && (c.resetParams = [this.options.chart.width, void 0, !1],
                    this.setSize(b, void 0, !1));
                [].forEach.call(c.childNodes, function (a, b) {
                    1 === a.nodeType && (c.origDisplay[b] = a.style.display, a.style.display = "none");
                });
                this.moveContainers(a);
                this.printReverseInfo = c;
            }
            function z(a) {
                a.renderExporting();
                l(a, "redraw", a.renderExporting);
                l(a, "destroy", a.destroyExport);
            }
            function A(b, c, d, e, f, g, h) {
                var o = this, q = o.options.navigation, t = o.chartWidth, u = o.chartHeight, v = "cache-" + b, w = Math.max(f, g), x = o[v];
                if (!x) {
                    o.exportContextMenu = o[v] = x = n("div", {
                        className: b
                    }, {
                        position: "absolute",
                        zIndex: 1e3,
                        padding: w + "px",
                        pointerEvents: "auto"
                    }, o.fixedDiv || o.container);
                    var y = n("ul", {
                        className: "highcharts-menu"
                    }, {
                        listStyle: "none",
                        margin: 0,
                        padding: 0
                    }, x);
                    o.styledMode || m(y, p({
                        MozBoxShadow: "3px 3px 10px #888",
                        WebkitBoxShadow: "3px 3px 10px #888",
                        boxShadow: "3px 3px 10px #888"
                    }, q.menuStyle));
                    x.hideMenu = function () {
                        m(x, {
                            display: "none"
                        });
                        h && h.setState(0);
                        o.openMenu = !1;
                        m(o.renderTo, {
                            overflow: "hidden"
                        });
                        m(o.container, {
                            overflow: "hidden"
                        });
                        i.clearTimeout(x.hideTimer);
                        r(o, "exportMenuHidden");
                    };
                    o.exportEvents.push(l(x, "mouseleave", function () {
                        x.hideTimer = k.setTimeout(x.hideMenu, 500);
                    }), l(x, "mouseenter", function () {
                        i.clearTimeout(x.hideTimer);
                    }), l(j, "mouseup", function (a) {
                        o.pointer.inClass(a.target, b) || x.hideMenu();
                    }), l(x, "click", function () {
                        o.openMenu && x.hideMenu();
                    }));
                    c.forEach(function (b) {
                        "string" === typeof b && (b = o.options.exporting.menuItemDefinitions[b]);
                        if (s(b, !0)) {
                            var c = void 0;
                            b.separator ? c = n("hr", void 0, void 0, y) : ("viewData" === b.textKey && o.isDataTableVisible && (b.textKey = "hideData"),
                                c = n("li", {
                                    className: "highcharts-menu-item",
                                    onclick: function (a) {
                                        a && a.stopPropagation();
                                        x.hideMenu();
                                        b.onclick && b.onclick.apply(o, arguments);
                                    }
                                }, void 0, y), a.setElementHTML(c, b.text || o.options.lang[b.textKey]), o.styledMode || (c.onmouseover = function () {
                                    m(this, q.menuItemHoverStyle);
                                }, c.onmouseout = function () {
                                    m(this, q.menuItemStyle);
                                }, m(c, p({
                                    cursor: "pointer"
                                }, q.menuItemStyle || {}))));
                            o.exportDivElements.push(c);
                        }
                    });
                    o.exportDivElements.push(y, x);
                    o.exportMenuWidth = x.offsetWidth;
                    o.exportMenuHeight = x.offsetHeight;
                }
                c = {
                    display: "block"
                };
                d + o.exportMenuWidth > t ? c.right = t - d - f - w + "px" : c.left = d - w + "px";
                e + g + o.exportMenuHeight > u && "top" !== h.alignOptions.verticalAlign ? c.bottom = u - e - w + "px" : c.top = e + g - w + "px";
                m(x, c);
                m(o.renderTo, {
                    overflow: ""
                });
                m(o.container, {
                    overflow: ""
                });
                o.openMenu = !0;
                r(o, "exportMenuShown");
            }
            function B(a) {
                var b = a ? a.target : this, c = b.exportSVGElements, d = b.exportDivElements;
                a = b.exportEvents;
                var e;
                c && (c.forEach(function (a, d) {
                    a && (a.onclick = a.ontouchstart = null, e = "cache-" + a.menuClassName, b[e] && delete b[e],
                        c[d] = a.destroy());
                }), c.length = 0);
                b.exportingGroup && (b.exportingGroup.destroy(), delete b.exportingGroup);
                d && (d.forEach(function (a, b) {
                    a && (i.clearTimeout(a.hideTimer), w(a, "mouseleave"), d[b] = a.onmouseout = a.onmouseover = a.ontouchstart = a.onclick = null,
                        o(a));
                }), d.length = 0);
                a && (a.forEach(function (a) {
                    a();
                }), a.length = 0);
            }
            function C(a, b) {
                b = this.getSVGForExport(a, b);
                a = t(this.options.exporting, a);
                h.post(a.url, {
                    filename: a.filename ? a.filename.replace(/\//g, "-") : this.getFilename(),
                    type: a.type,
                    width: a.width || 0,
                    scale: a.scale,
                    svg: b
                }, a.formAttributes);
            }
            function D() {
                this.styledMode && this.inlineStyles();
                return this.container.innerHTML;
            }
            function E() {
                var a = this.userOptions.title && this.userOptions.title.text, b = this.options.exporting.filename;
                if (b) return b.replace(/\//g, "-");
                "string" === typeof a && (b = a.toLowerCase().replace(/<\/?[^>]+(>|$)/g, "").replace(/[\s_]+/g, "-").replace(/[^a-z0-9\-]/g, "").replace(/^[\-]+/g, "").replace(/[\-]+/g, "-").substr(0, 24).replace(/[\-]+$/g, ""));
                if (!b || 5 > b.length) b = "chart";
                return b;
            }
            function F(a) {
                var b, c = t(this.options, a);
                c.plotOptions = t(this.userOptions.plotOptions, a && a.plotOptions);
                c.time = t(this.userOptions.time, a && a.time);
                var d = n("div", null, {
                    position: "absolute",
                    top: "-9999em",
                    width: this.chartWidth + "px",
                    height: this.chartHeight + "px"
                }, j.body), e = this.renderTo.style.width;
                var f = this.renderTo.style.height;
                e = c.exporting.sourceWidth || c.chart.width || /px$/.test(e) && parseInt(e, 10) || (c.isGantt ? 800 : 600);
                f = c.exporting.sourceHeight || c.chart.height || /px$/.test(f) && parseInt(f, 10) || 400;
                p(c.chart, {
                    animation: !1,
                    renderTo: d,
                    forExport: !0,
                    renderer: "SVGRenderer",
                    width: e,
                    height: f
                });
                c.exporting.enabled = !1;
                delete c.data;
                c.series = [];
                this.series.forEach(function (a) {
                    b = t(a.userOptions, {
                        animation: !1,
                        enableMouseTracking: !1,
                        showCheckbox: !1,
                        visible: a.visible
                    });
                    b.isInternal || c.series.push(b);
                });
                var g = {};
                this.axes.forEach(function (a) {
                    a.userOptions.internalKey || (a.userOptions.internalKey = x());
                    a.options.isInternal || (g[a.coll] || (g[a.coll] = !0, c[a.coll] = []), c[a.coll].push(t(a.userOptions, {
                        visible: a.visible
                    })));
                });
                var h = new this.constructor(c, this.callback);
                a && ["xAxis", "yAxis", "series"].forEach(function (b) {
                    var c = {};
                    a[b] && (c[b] = a[b], h.update(c));
                });
                this.axes.forEach(function (a) {
                    var b = q(h.axes, function (b) {
                        return b.options.internalKey === a.userOptions.internalKey;
                    }), c = a.getExtremes(), d = c.userMin;
                    c = c.userMax;
                    b && ("undefined" !== typeof d && d !== b.min || "undefined" !== typeof c && c !== b.max) && b.setExtremes(d, c, !0, !1);
                });
                f = h.getChartHTML();
                r(this, "getSVG", {
                    chartCopy: h
                });
                f = this.sanitizeSVG(f, c);
                c = null;
                h.destroy();
                o(d);
                return f;
            }
            function G(a, b) {
                var c = this.options.exporting;
                return this.getSVG(t({
                    chart: {
                        borderRadius: 0
                    }
                }, c.chartOptions, b, {
                    exporting: {
                        sourceWidth: a && a.sourceWidth || c.sourceWidth,
                        sourceHeight: a && a.sourceHeight || c.sourceHeight
                    }
                }));
            }
            function H(a) {
                return a.replace(/([A-Z])/g, function (a, b) {
                    return "-" + b.toLowerCase();
                });
            }
            function I() {
                function a(b) {
                    var h = "", j, l;
                    if (1 === b.nodeType && -1 === R.indexOf(b.nodeName)) {
                        var m = k.getComputedStyle(b, null);
                        var n = "svg" === b.nodeName ? {} : k.getComputedStyle(b.parentNode, null);
                        if (!e[b.nodeName]) {
                            f = i.getElementsByTagName("svg")[0];
                            var o = i.createElementNS(b.namespaceURI, b.nodeName);
                            f.appendChild(o);
                            e[b.nodeName] = t(k.getComputedStyle(o, null));
                            "text" === b.nodeName && delete e.text.fill;
                            f.removeChild(o);
                        }
                        for (var p in m) if (g.isFirefox || g.isMS || g.isSafari || Object.hasOwnProperty.call(m, p)) {
                            var q = m[p], r = p;
                            o = j = !1;
                            if (d.length) {
                                for (l = d.length; l-- && !j;) j = d[l].test(r);
                                o = !j;
                            }
                            "transform" === r && "none" === q && (o = !0);
                            for (l = c.length; l-- && !o;) o = c[l].test(r) || "function" === typeof q;
                            o || n[r] === q && "svg" !== b.nodeName || e[b.nodeName][r] === q || (Q && -1 === Q.indexOf(r) ? h += H(r) + ":" + q + ";" : q && b.setAttribute(H(r), q));
                        }
                        h && (m = b.getAttribute("style"), b.setAttribute("style", (m ? m + ";" : "") + h));
                        "svg" === b.nodeName && b.setAttribute("stroke-width", "1px");
                        "text" !== b.nodeName && [].forEach.call(b.children || b.childNodes, a);
                    }
                }
                var c = P, d = b.inlineWhitelist, e = {}, f, h = j.createElement("iframe");
                m(h, {
                    width: "1px",
                    height: "1px",
                    visibility: "hidden"
                });
                j.body.appendChild(h);
                var i = h.contentWindow.document;
                i.open();
                i.write('<svg xmlns="http://www.w3.org/2000/svg"></svg>');
                i.close();
                a(this.container.querySelector("svg"));
                f.parentNode.removeChild(f);
                h.parentNode.removeChild(h);
            }
            function J(a) {
                (this.fixedDiv ? [this.fixedDiv, this.scrollingContainer] : [this.container]).forEach(function (b) {
                    a.appendChild(b);
                });
            }
            function K() {
                var a = this;
                a.exporting = {
                    update: function (b, c) {
                        a.isDirtyExporting = !0;
                        t(!0, a.options.exporting, b);
                        v(c, !0) && a.redraw();
                    }
                };
                c.compose(a).navigation.addUpdate(function (b, c) {
                    a.isDirtyExporting = !0;
                    t(!0, a.options.navigation, b);
                    v(c, !0) && a.redraw();
                });
            }
            function L() {
                var a = this;
                a.isPrinting || (S = a, g.isSafari || a.beforePrint(), setTimeout(function () {
                    k.focus();
                    k.print();
                    g.isSafari || setTimeout(function () {
                        a.afterPrint();
                    }, 1e3);
                }, 1));
            }
            function M() {
                var a = this, b = a.options.exporting, c = b.buttons, d = a.isDirtyExporting || !a.exportSVGElements;
                a.buttonOffset = 0;
                a.isDirtyExporting && a.destroyExport();
                d && !1 !== b.enabled && (a.exportEvents = [], a.exportingGroup = a.exportingGroup || a.renderer.g("exporting-group").attr({
                    zIndex: 3
                }).add(), u(c, function (b) {
                    a.addButton(b);
                }), a.isDirtyExporting = !1);
            }
            function N(a, b) {
                var c = a.indexOf("</svg>") + 6, d = a.substr(c);
                a = a.substr(0, c);
                b && b.exporting && b.exporting.allowHTML && d && (d = '<foreignObject x="0" y="0" width="' + b.chart.width + '" height="' + b.chart.height + '"><body xmlns="http://www.w3.org/1999/xhtml">' + d.replace(/(<(?:img|br).*?(?=>))>/g, "$1 />") + "</body></foreignObject>",
                    a = a.replace("</svg>", d + "</svg>"));
                a = a.replace(/zIndex="[^"]+"/g, "").replace(/symbolName="[^"]+"/g, "").replace(/jQuery[0-9]+="[^"]+"/g, "").replace(/url\(("|&quot;)(.*?)("|&quot;);?\)/g, "url($2)").replace(/url\([^#]+#/g, "url(#").replace(/<svg /, '<svg xmlns:xlink="http://www.w3.org/1999/xlink" ').replace(/ (|NS[0-9]+:)href=/g, " xlink:href=").replace(/\n/, " ").replace(/(fill|stroke)="rgba\(([ 0-9]+,[ 0-9]+,[ 0-9]+),([ 0-9\.]+)\)"/g, '$1="rgb($2)" $1-opacity="$3"').replace(/&nbsp;/g, " ").replace(/&shy;/g, "­");
                this.ieSanitizeSVG && (a = this.ieSanitizeSVG(a));
                return a;
            }
            var O = [], P = [/-/, /^(clipPath|cssText|d|height|width)$/, /^font$/, /[lL]ogical(Width|Height)$/, /perspective/, /TapHighlightColor/, /^transition/, /^length$/], Q = "fill stroke strokeLinecap strokeLinejoin strokeWidth textAnchor x y".split(" ");
            b.inlineWhitelist = [];
            var R = ["clipPath", "defs", "desc"], S;
            b.compose = function (a, b) {
                f.compose(b);
                -1 === O.indexOf(a) && (O.push(a), b = a.prototype, b.afterPrint = e, b.exportChart = C,
                    b.inlineStyles = I, b.print = L, b.sanitizeSVG = N, b.getChartHTML = D, b.getSVG = F,
                    b.getSVGForExport = G, b.getFilename = E, b.moveContainers = J, b.beforePrint = y,
                    b.contextMenu = A, b.addButton = d, b.destroyExport = B, b.renderExporting = M,
                    b.callbacks.push(z), l(a, "init", K), g.isSafari && g.win.matchMedia("print").addListener(function (a) {
                        S && (a.matches ? S.beforePrint() : S.afterPrint());
                    }));
            };
        }(y || (y = {}));
        b.exporting = t(e.exporting, b.exporting);
        b.lang = t(e.lang, b.lang);
        b.navigation = t(e.navigation, b.navigation);
        return y;
    });
    b(a, "masters/modules/exporting.src.js", [a["Core/Globals.js"], a["Extensions/Exporting/Exporting.js"], a["Core/HttpUtilities.js"]], function (a, b, c) {
        a.HttpUtilities = c;
        a.ajax = c.ajax;
        a.getJSON = c.getJSON;
        a.post = c.post;
        b.compose(a.Chart, a.Renderer);
    });
});