!function (a) {
    "object" === typeof module && module.exports ? (a["default"] = a, module.exports = a) : "function" === typeof define && define.amd ? define("highcharts/modules/export-data", ["highcharts", "highcharts/modules/exporting"], function (b) {
        a(b);
        a.Highcharts = b;
        return a;
    }) : a("undefined" !== typeof Highcharts ? Highcharts : void 0);
}(function (a) {
    function b(a, b, c, d) {
        a.hasOwnProperty(b) || (a[b] = d.apply(null, c), "function" === typeof CustomEvent && window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded", {
            detail: {
                path: b,
                module: a[b]
            }
        })));
    }
    a = a ? a._modules : {};
    b(a, "Extensions/DownloadURL.js", [a["Core/Globals.js"]], function (a) {
        var b = a.isSafari, c = a.win, d = c.document, e = c.URL || c.webkitURL || c, f = a.dataURLtoBlob = function (a) {
            if ((a = a.replace(/filename=.*;/, "").match(/data:([^;]*)(;base64)?,([0-9A-Za-z+\/]+)/)) && 3 < a.length && c.atob && c.ArrayBuffer && c.Uint8Array && c.Blob && e.createObjectURL) {
                var b = c.atob(a[3]), d = new c.ArrayBuffer(b.length);
                d = new c.Uint8Array(d);
                for (var f = 0; f < d.length; ++f) d[f] = b.charCodeAt(f);
                a = new c.Blob([d], {
                    type: a[1]
                });
                return e.createObjectURL(a);
            }
        };
        a = a.downloadURL = function (a, e) {
            var g = c.navigator, h = d.createElement("a");
            if ("string" === typeof a || a instanceof String || !g.msSaveOrOpenBlob) {
                a = "" + a;
                g = /Edge\/\d+/.test(g.userAgent);
                if (b && "string" === typeof a && 0 === a.indexOf("data:application/pdf") || g || 2e6 < a.length) if (a = f(a) || "",
                    !a) throw Error("Failed to convert to blob");
                if ("undefined" !== typeof h.download) h.href = a, h.download = e, d.body.appendChild(h),
                    h.click(), d.body.removeChild(h); else try {
                        var i = c.open(a, "chart");
                        if ("undefined" === typeof i || null === i) throw Error("Failed to open window");
                    } catch (j) {
                        c.location.href = a;
                    }
            } else g.msSaveOrOpenBlob(a, e);
        };
        return {
            dataURLtoBlob: f,
            downloadURL: a
        };
    });
    b(a, "Extensions/ExportData.js", [a["Core/Axis/Axis.js"], a["Core/Chart/Chart.js"], a["Core/Renderer/HTML/AST.js"], a["Core/Globals.js"], a["Core/DefaultOptions.js"], a["Core/Utilities.js"], a["Extensions/DownloadURL.js"]], function (a, b, c, d, e, f, g) {
        function h(a, b) {
            var c = k.navigator, d = -1 < c.userAgent.indexOf("WebKit") && 0 > c.userAgent.indexOf("Chrome"), e = k.URL || k.webkitURL || k;
            try {
                if (c.msSaveOrOpenBlob && k.MSBlobBuilder) {
                    var f = new k.MSBlobBuilder();
                    f.append(a);
                    return f.getBlob("image/svg+xml");
                }
                if (!d) return e.createObjectURL(new k.Blob(["﻿" + a], {
                    type: b
                }));
            } catch (g) { }
        }
        var i = d.doc, j = d.seriesTypes, k = d.win;
        d = e.getOptions;
        e = e.setOptions;
        var l = f.addEvent, m = f.defined, n = f.extend, o = f.find, p = f.fireEvent, q = f.isNumber, r = f.pick, s = g.downloadURL;
        e({
            exporting: {
                csv: {
                    annotations: {
                        itemDelimiter: "; ",
                        join: !1
                    },
                    columnHeaderFormatter: null,
                    dateFormat: "%Y-%m-%d %H:%M:%S",
                    decimalPoint: null,
                    itemDelimiter: null,
                    lineDelimiter: "\n"
                },
                showTable: !1,
                useMultiLevelHeaders: !0,
                useRowspanHeaders: !0
            },
            lang: {
                downloadCSV: "Download CSV",
                downloadXLS: "Download XLS",
                exportData: {
                    annotationHeader: "Annotations",
                    categoryHeader: "Category",
                    categoryDatetimeHeader: "DateTime"
                },
                viewData: "View data table",
                hideData: "Hide data table"
            }
        });
        l(b, "render", function () {
            this.options && this.options.exporting && this.options.exporting.showTable && !this.options.chart.forExport && !this.dataTableDiv && this.viewData();
        });
        b.prototype.setUpKeyToAxis = function () {
            j.arearange && (j.arearange.prototype.keyToAxis = {
                low: "y",
                high: "y"
            });
            j.gantt && (j.gantt.prototype.keyToAxis = {
                start: "x",
                end: "x"
            });
        };
        b.prototype.getDataRows = function (b) {
            var c = this.hasParallelCoordinates, d = this.time, e = this.options.exporting && this.options.exporting.csv || {}, f = this.xAxis, g = {}, h = [], i = [], j = [], k;
            var l = this.options.lang.exportData;
            var n = l.categoryHeader, s = l.categoryDatetimeHeader, t = function (c, d, f) {
                if (e.columnHeaderFormatter) {
                    var g = e.columnHeaderFormatter(c, d, f);
                    if (!1 !== g) return g;
                }
                return c ? c instanceof a ? c.options.title && c.options.title.text || (c.dateTime ? s : n) : b ? {
                    columnTitle: 1 < f ? d : c.name,
                    topLevelColumnTitle: c.name
                } : c.name + (1 < f ? " (" + d + ")" : "") : n;
            }, u = function (a, b, c) {
                var d = {}, e = {};
                b.forEach(function (b) {
                    var f = (a.keyToAxis && a.keyToAxis[b] || b) + "Axis";
                    f = q(c) ? a.chart[f][c] : a[f];
                    d[b] = f && f.categories || [];
                    e[b] = f && f.dateTime;
                });
                return {
                    categoryMap: d,
                    dateTimeValueAxisMap: e
                };
            }, v = function (a, b) {
                return a.data.filter(function (a) {
                    return "undefined" !== typeof a.y && a.name;
                }).length && b && !b.categories && !a.keyToAxis ? a.pointArrayMap && a.pointArrayMap.filter(function (a) {
                    return "x" === a;
                }).length ? (a.pointArrayMap.unshift("x"), a.pointArrayMap) : ["x", "y"] : a.pointArrayMap || ["y"];
            }, w = [];
            var x = 0;
            this.setUpKeyToAxis();
            this.series.forEach(function (a) {
                var h = a.xAxis, l = a.options.keys || v(a, h), m = l.length, n = !a.requireSorting && {}, p = f.indexOf(h), q = u(a, l), s;
                if (!1 !== a.options.includeInDataExport && !a.options.isInternal && !1 !== a.visible) {
                    o(w, function (a) {
                        return a[0] === p;
                    }) || w.push([p, x]);
                    for (s = 0; s < m;) k = t(a, l[s], l.length), j.push(k.columnTitle || k), b && i.push(k.topLevelColumnTitle || k),
                        s++;
                    var y = {
                        chart: a.chart,
                        autoIncrement: a.autoIncrement,
                        options: a.options,
                        pointArrayMap: a.pointArrayMap
                    };
                    a.options.data.forEach(function (b, f) {
                        c && (q = u(a, l, f));
                        var i = {
                            series: y
                        };
                        a.pointClass.prototype.applyOptions.apply(i, [b]);
                        b = i.x;
                        var j = a.data[f] && a.data[f].name;
                        s = 0;
                        if (!h || "name" === a.exportKey || !c && h && h.hasNames && j) b = j;
                        n && (n[b] && (b += "|" + f), n[b] = !0);
                        g[b] || (g[b] = [], g[b].xValues = []);
                        g[b].x = i.x;
                        g[b].name = j;
                        for (g[b].xValues[p] = i.x; s < m;) f = l[s], j = i[f], g[b][x + s] = r(q.categoryMap[f][j], q.dateTimeValueAxisMap[f] ? d.dateFormat(e.dateFormat, j) : null, j),
                            s++;
                    });
                    x += s;
                }
            });
            for (y in g) Object.hasOwnProperty.call(g, y) && h.push(g[y]);
            var y = b ? [i, j] : [j];
            for (x = w.length; x--;) {
                var z = w[x][0];
                var A = w[x][1];
                var B = f[z];
                h.sort(function (a, b) {
                    return a.xValues[z] - b.xValues[z];
                });
                l = t(B);
                y[0].splice(A, 0, l);
                b && y[1] && y[1].splice(A, 0, l);
                h.forEach(function (a) {
                    var b = a.name;
                    B && !m(b) && (B.dateTime ? (a.x instanceof Date && (a.x = a.x.getTime()), b = d.dateFormat(e.dateFormat, a.x)) : b = B.categories ? r(B.names[a.x], B.categories[a.x], a.x) : a.x);
                    a.splice(A, 0, b);
                });
            }
            y = y.concat(h);
            p(this, "exportData", {
                dataRows: y
            });
            return y;
        };
        b.prototype.getCSV = function (a) {
            var b = "", c = this.getDataRows(), d = this.options.exporting.csv, e = r(d.decimalPoint, "," !== d.itemDelimiter && a ? 1.1.toLocaleString()[1] : "."), f = r(d.itemDelimiter, "," === e ? ";" : ","), g = d.lineDelimiter;
            c.forEach(function (a, d) {
                for (var h, i = a.length; i--;) h = a[i], "string" === typeof h && (h = '"' + h + '"'),
                    "number" === typeof h && "." !== e && (h = h.toString().replace(".", e)), a[i] = h;
                b += a.join(f);
                d < c.length - 1 && (b += g);
            });
            return b;
        };
        b.prototype.getTable = function (a) {
            var b = function (a) {
                if (!a.tagName || "#text" === a.tagName) return a.textContent || "";
                var c = a.attributes, d = "<" + a.tagName;
                c && Object.keys(c).forEach(function (a) {
                    d += " " + a + '="' + c[a] + '"';
                });
                d += ">";
                d += a.textContent || "";
                (a.children || []).forEach(function (a) {
                    d += b(a);
                });
                return d += "</" + a.tagName + ">";
            };
            a = this.getTableAST(a);
            return b(a);
        };
        b.prototype.getTableAST = function (a) {
            var b = 0, c = [], d = this.options, e = a ? 1.1.toLocaleString()[1] : ".", f = r(d.exporting.useMultiLevelHeaders, !0);
            a = this.getDataRows(f);
            var g = f ? a.shift() : null, h = a.shift(), i = function (a, b, c, d) {
                var f = r(d, "");
                b = "text" + (b ? " " + b : "");
                "number" === typeof f ? (f = f.toString(), "," === e && (f = f.replace(".", e)),
                    b = "number") : d || (b = "empty");
                c = n({
                    "class": b
                }, c);
                return {
                    tagName: a,
                    attributes: c,
                    textContent: f
                };
            };
            !1 !== d.exporting.tableCaption && c.push({
                tagName: "caption",
                attributes: {
                    "class": "highcharts-table-caption"
                },
                textContent: r(d.exporting.tableCaption, d.title.text ? d.title.text : "Chart")
            });
            for (var j = 0, k = a.length; j < k; ++j) a[j].length > b && (b = a[j].length);
            c.push(function (a, b, c) {
                var e = [], g = 0;
                c = c || b && b.length;
                var h = 0, j;
                if (j = f && a && b) {
                    a: if (j = a.length, b.length === j) {
                        for (; j--;) if (a[j] !== b[j]) {
                            j = !1;
                            break a;
                        }
                        j = !0;
                    } else j = !1;
                    j = !j;
                }
                if (j) {
                    for (j = []; g < c; ++g) {
                        var k = a[g];
                        var l = a[g + 1];
                        k === l ? ++h : h ? (j.push(i("th", "highcharts-table-topheading", {
                            scope: "col",
                            colspan: h + 1
                        }, k)), h = 0) : (k === b[g] ? d.exporting.useRowspanHeaders ? (l = 2, delete b[g]) : (l = 1,
                            b[g] = "") : l = 1, k = i("th", "highcharts-table-topheading", {
                                scope: "col"
                            }, k), 1 < l && k.attributes && (k.attributes.valign = "top", k.attributes.rowspan = l),
                            j.push(k));
                    }
                    e.push({
                        tagName: "tr",
                        children: j
                    });
                }
                if (b) {
                    j = [];
                    g = 0;
                    for (c = b.length; g < c; ++g) "undefined" !== typeof b[g] && j.push(i("th", null, {
                        scope: "col"
                    }, b[g]));
                    e.push({
                        tagName: "tr",
                        children: j
                    });
                }
                return {
                    tagName: "thead",
                    children: e
                };
            }(g, h, Math.max(b, h.length)));
            var l = [];
            a.forEach(function (a) {
                for (var c = [], d = 0; d < b; d++) c.push(i(d ? "td" : "th", null, d ? {} : {
                    scope: "row"
                }, a[d]));
                l.push({
                    tagName: "tr",
                    children: c
                });
            });
            c.push({
                tagName: "tbody",
                children: l
            });
            c = {
                tree: {
                    tagName: "table",
                    id: "highcharts-data-table-" + this.index,
                    children: c
                }
            };
            p(this, "aftergetTableAST", c);
            return c.tree;
        };
        b.prototype.downloadCSV = function () {
            var a = this.getCSV(!0);
            s(h(a, "text/csv") || "data:text/csv,﻿" + encodeURIComponent(a), this.getFilename() + ".csv");
        };
        b.prototype.downloadXLS = function () {
            var a = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>Ark1</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>td{border:none;font-family: Calibri, sans-serif;} .number{mso-number-format:"0.00";} .text{ mso-number-format:"@";}</style><meta name=ProgId content=Excel.Sheet><meta charset=UTF-8></head><body>' + this.getTable(!0) + "</body></html>";
            s(h(a, "application/vnd.ms-excel") || "data:application/vnd.ms-excel;base64," + k.btoa(unescape(encodeURIComponent(a))), this.getFilename() + ".xls");
        };
        b.prototype.viewData = function () {
            this.toggleDataTable(!0);
        };
        b.prototype.hideData = function () {
            this.toggleDataTable(!1);
        };
        b.prototype.toggleDataTable = function (a) {
            (a = r(a, !this.isDataTableVisible)) && !this.dataTableDiv && (this.dataTableDiv = i.createElement("div"),
                this.dataTableDiv.className = "highcharts-data-table", this.renderTo.parentNode.insertBefore(this.dataTableDiv, this.renderTo.nextSibling));
            this.dataTableDiv && (this.dataTableDiv.style.display = a ? "block" : "none", a && (this.dataTableDiv.innerHTML = c.emptyHTML,
                new c([this.getTableAST()]).addToDOM(this.dataTableDiv), p(this, "afterViewData", this.dataTableDiv)));
            this.isDataTableVisible = a;
            a = this.exportDivElements;
            var b = this.options.exporting, d = b && b.buttons && b.buttons.contextButton.menuItems;
            b = this.options.lang;
            t && t.menuItemDefinitions && b && b.viewData && b.hideData && d && a && (a = a[d.indexOf("viewData")]) && c.setElementHTML(a, this.isDataTableVisible ? b.hideData : b.viewData);
        };
        var t = d().exporting;
        t && (n(t.menuItemDefinitions, {
            downloadCSV: {
                textKey: "downloadCSV",
                onclick: function () {
                    this.downloadCSV();
                }
            },
            downloadXLS: {
                textKey: "downloadXLS",
                onclick: function () {
                    this.downloadXLS();
                }
            },
            viewData: {
                textKey: "viewData",
                onclick: function () {
                    this.toggleDataTable();
                }
            }
        }), t.buttons && t.buttons.contextButton.menuItems.push("separator", "downloadCSV", "downloadXLS", "viewData"));
        j.map && (j.map.prototype.exportKey = "name");
        j.mapbubble && (j.mapbubble.prototype.exportKey = "name");
        j.treemap && (j.treemap.prototype.exportKey = "name");
    });
    b(a, "masters/modules/export-data.src.js", [], function () { });
});